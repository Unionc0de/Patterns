#include <iostream>
#include <string>
#include <stack>
#define random(min,max) (min + rand() % (max - min + 1))
using namespace std;

//Снимок — это поведенческий паттерн проектирования, 
//который позволяет сохранять и восстанавливать прошлые состояния объектов, 
//не раскрывая подробностей их реализации.

class Memento{
private:
    string state;
public:
    Memento(string state) :state(state){}

    string getState() {
        return this->state;
    }
};

class TextEditor {
private:
    string text;
public:
    void setText(string text) {
        this->text = text;
    }

    string getText() {
        return this->text;
    }
    
    Memento save() {
        return Memento(text);
    }

    void restore(Memento memento) {
        text = memento.getState();
    }
};

class Caretaker {
private:
    stack <Memento> history;
public:
    void save(const Memento& memento) {
        history.push(memento);
    }

    Memento undo() {
        if (history.empty()) {
            throw out_of_range("Nothing to undo");
        }
        Memento undo = history.top();
        history.pop();
        return undo;
    }
};

int main()
{
    setlocale(LC_ALL, "rus");
    srand(time(NULL));
    TextEditor editor;
    Caretaker caretaker;

    editor.setText("Galina");
    caretaker.save(editor.save());
    cout << "Text now: " << editor.getText() << endl;
    
    editor.setText("Svetlana");
    caretaker.save(editor.save());
    cout << "Text now: " << editor.getText() << endl;
    try {
        editor.setText("Elena");
        cout << "Text now: " << editor.getText() << endl;

        editor.restore(caretaker.undo());
        cout << "Restored text 1: " << editor.getText() << endl;

        editor.restore(caretaker.undo());
        cout << "Restored text 2: " << editor.getText() << endl;
        
        editor.restore(caretaker.undo());
        cout << "Restored text 2: " << editor.getText() << endl;
    }

    catch (exception ex) {
        cout << ex.what() << endl;
    }
   
}
